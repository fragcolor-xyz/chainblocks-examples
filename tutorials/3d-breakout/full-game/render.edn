; SPDX-License-Identifier: BSD-3-Clause
; Copyright Â© 2021 Fragcolor Pte. Ltd.

(def cube
  {"Vertices"
   [(float3 -1.0  1.0  1.0) 0xff000000
    (float3  1.0  1.0  1.0) 0xff0000ff
    (float3 -1.0 -1.0  1.0) 0xff00ff00
    (float3  1.0 -1.0  1.0) 0xff00ffff
    (float3 -1.0  1.0 -1.0) 0xffff0000
    (float3  1.0  1.0 -1.0) 0xffff00ff
    (float3 -1.0 -1.0 -1.0) 0xffffff00
    (float3  1.0 -1.0 -1.0) 0xffffffff]
   "Indices"
   [(int3 0 1 2)
    (int3 1 3 2)
    (int3 4 6 5)
    (int3 5 6 7)
    (int3 0 2 4)
    (int3 4 2 6)
    (int3 1 5 3)
    (int3 5 7 3)
    (int3 0 4 1)
    (int3 4 5 1)
    (int3 2 3 6)
    (int3 6 3 7)]})

(def shaders-folder
  (cond
    (= platform "windows") "dx11"
    (= platform "apple") "metal"
    (or
     (= platform "linux")
     (= platform "emscripten")) "glsl"))

(defblocks to-3d [factor]
  (Setup
   0.0 >= .y >= .z);; note: explain in the tutorial that it is optional but good
  (Map
   (-> (| (Take 0) (Math.Multiply (float factor)) > .y)
       (| (Take 1) (Math.Multiply (float factor)) > .z)
       [0 .y .z] (ToFloat3)
       (Math.Translation))))

; function: render blocks
; input: sequence of float2
; args: matrix?
; output: passthrough or none
(defblocks render-blocks []
  (Setup
   cube (GFX.Model
         :Layout [VertexAttribute.Position VertexAttribute.Color0]
         :CullMode CullMode.Front) >= .cube
   (str "../shaders/" shaders-folder "/vs_cubes.bin") ;; can use instancing
   (FS.Read :Bytes true) >= .vs_bytes
   (str "../shaders/" shaders-folder "/fs_cubes.bin") ;; can use instancing
   (FS.Read :Bytes true) >= .fs_bytes
   (GFX.Shader :VertexShader .vs_bytes :PixelShader .fs_bytes) >= .shader)

  (to-3d 5)
  (Map (GFX.Draw :Shader .shader :Model .cube)) ;;map not needed if using instancing
  )

; function: render ball
; input: float2
; args: matrix?
; output: passthrough or none
(defblocks render-ball []
  nil)

; function: render pad
; input: float2
; args: matrix?
; output: passthrough or none
(defblocks render-pad []
  nil)
